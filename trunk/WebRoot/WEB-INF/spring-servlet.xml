<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:annotation-config />
	
	<!-- 开启默认的注解映射的支持 -->
	<mvc:annotation-driven />
	
	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.joven" />

	<!-- 上传控制 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"	p:defaultEncoding="utf-8" />

	 <!--拦截器 -->
	<mvc:interceptors>
		 <!-- 多个拦截器,顺序执行--> 
		<mvc:interceptor>  
			<!-- 如果不配置或/*,将拦截所有的Controller 可以使用正则表达式对url进行匹配，从而更细粒度的进行拦截(.*/entryOrJsonController\.do\?action=reg.*);--> 
	        <mvc:mapping path="/bbs/topic.do"/>
	        <mvc:mapping path="/bbs/reply.do"/> 
	        <bean class="com.joven.Interceptor.FnAuthorityInterceptor"/>
	    </mvc:interceptor> 
	</mvc:interceptors>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/view/" p:suffix=".jsp" />
	
		
	<!-- 将指定路径的请求直接转到对应的view上，而不需要特定的controller来处理请求 . 
	注意：此处的映射路径是/hello.do,因为web.xml配置的是*.do，如果只用/hello将不被Spring DispatcherServlet拦截到而无法定向 
	<mvc:view-controller path="/hello.do" view-name="hello" />
	-->
	
	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd 
	<mvc:resources mapping="/js/**" location="/js/" />
	-->	
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	  <!-- annotatedScanPackages可以自动搜索某个package的全部标记@Entity class -->  
	 <property name="packagesToScan" value="com.joven.**.model" />
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost/bbs"/>
		<property name="username" value="root"/>
		<property name="password" value="123"/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">   
        <property name="sessionFactory" ref="sessionFactory"/>   
    </bean> 

	
	<!-- 如果要在代码注解中定义事务，下面tx和aop就配置就可以省略  注解：@Transactional(propagation=Propagation.REQUIRED) -->
	<!-- 基于AOP技术的事务管理实现 -->
	<aop:config>
		<!-- 定义一个事务切入点,拦截com.joven.service.impl包中所有类的所有方法 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.joven.service.impl.*.*(..))" />
		<!-- 引用txAdvice事务通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>	
	
	<!-- 定义一个事务通知txAdvice,配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有以add、update、save及 del开头的业务逻辑方法均做事务控制 -->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<!-- 设置其它所有方法均可以在事务内运行但也可以在无事务环境下运行 -->
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	
</beans>  
